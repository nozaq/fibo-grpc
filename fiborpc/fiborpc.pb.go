// Code generated by protoc-gen-go.
// source: fiborpc.proto
// DO NOT EDIT!

/*
Package fiborpc is a generated protocol buffer package.

It is generated from these files:
	fiborpc.proto

It has these top-level messages:
	FiboRequest
	FiboReply
*/
package fiborpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type FiboRequest struct {
	Index int32 `protobuf:"varint,1,opt,name=index" json:"index,omitempty"`
}

func (m *FiboRequest) Reset()                    { *m = FiboRequest{} }
func (m *FiboRequest) String() string            { return proto.CompactTextString(m) }
func (*FiboRequest) ProtoMessage()               {}
func (*FiboRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type FiboReply struct {
	Value int32 `protobuf:"varint,1,opt,name=value" json:"value,omitempty"`
}

func (m *FiboReply) Reset()                    { *m = FiboReply{} }
func (m *FiboReply) String() string            { return proto.CompactTextString(m) }
func (*FiboReply) ProtoMessage()               {}
func (*FiboReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*FiboRequest)(nil), "fiborpc.FiboRequest")
	proto.RegisterType((*FiboReply)(nil), "fiborpc.FiboReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Leonardo service

type LeonardoClient interface {
	Fibo(ctx context.Context, in *FiboRequest, opts ...grpc.CallOption) (*FiboReply, error)
}

type leonardoClient struct {
	cc *grpc.ClientConn
}

func NewLeonardoClient(cc *grpc.ClientConn) LeonardoClient {
	return &leonardoClient{cc}
}

func (c *leonardoClient) Fibo(ctx context.Context, in *FiboRequest, opts ...grpc.CallOption) (*FiboReply, error) {
	out := new(FiboReply)
	err := grpc.Invoke(ctx, "/fiborpc.Leonardo/Fibo", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Leonardo service

type LeonardoServer interface {
	Fibo(context.Context, *FiboRequest) (*FiboReply, error)
}

func RegisterLeonardoServer(s *grpc.Server, srv LeonardoServer) {
	s.RegisterService(&_Leonardo_serviceDesc, srv)
}

func _Leonardo_Fibo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FiboRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LeonardoServer).Fibo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/fiborpc.Leonardo/Fibo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LeonardoServer).Fibo(ctx, req.(*FiboRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Leonardo_serviceDesc = grpc.ServiceDesc{
	ServiceName: "fiborpc.Leonardo",
	HandlerType: (*LeonardoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Fibo",
			Handler:    _Leonardo_Fibo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("fiborpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 135 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0xcb, 0x4c, 0xca,
	0x2f, 0x2a, 0x48, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x94, 0xb9,
	0xb8, 0xdd, 0x32, 0x93, 0xf2, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x84, 0x44, 0xb8, 0x58,
	0x33, 0xf3, 0x52, 0x52, 0x2b, 0x24, 0x18, 0x15, 0x18, 0x35, 0x58, 0x83, 0x20, 0x1c, 0x25, 0x45,
	0x2e, 0x4e, 0x88, 0xa2, 0x82, 0x9c, 0x4a, 0x90, 0x92, 0xb2, 0xc4, 0x9c, 0xd2, 0x54, 0x98, 0x12,
	0x30, 0xc7, 0xc8, 0x8e, 0x8b, 0xc3, 0x27, 0x35, 0x3f, 0x2f, 0xb1, 0x28, 0x25, 0x5f, 0xc8, 0x88,
	0x8b, 0x05, 0xa4, 0x5c, 0x48, 0x44, 0x0f, 0x66, 0x29, 0x92, 0x15, 0x52, 0x42, 0x68, 0xa2, 0x05,
	0x39, 0x95, 0x4a, 0x0c, 0x49, 0x6c, 0x60, 0x77, 0x19, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x10,
	0xa7, 0x77, 0x5a, 0xa8, 0x00, 0x00, 0x00,
}
